"""Stub file for reflex_chakra/components/base.py"""

# ------------------- DO NOT EDIT ----------------------
# This file was generated by `reflex/utils/pyi_generator.py`!
# ------------------------------------------------------
from collections.abc import Mapping, Sequence
from typing import (
    Any,
    Literal,
    TypeAlias,
)

from reflex.components.component import Component
from reflex.components.core.breakpoints import Breakpoints
from reflex.event import (
    EventType,
    PointerEventInfo,
)
from reflex.utils.imports import ImportDict
from reflex.vars.base import Var

class ChakraComponent(Component):
    @classmethod
    def create(
        cls,
        *children,
        style: Sequence[Mapping[str, Any]]
        | Mapping[str, Any]
        | Var[Mapping[str, Any]]
        | Breakpoints
        | None = None,
        key: Any | None = None,
        id: Any | None = None,
        ref: Var | None = None,
        class_name: Any | None = None,
        autofocus: bool | None = None,
        custom_attrs: dict[str, Var | Any] | None = None,
        on_blur: EventType[()] | None = None,
        on_click: EventType[()] | EventType[PointerEventInfo] | None = None,
        on_context_menu: EventType[()] | EventType[PointerEventInfo] | None = None,
        on_double_click: EventType[()] | EventType[PointerEventInfo] | None = None,
        on_focus: EventType[()] | None = None,
        on_mount: EventType[()] | None = None,
        on_mouse_down: EventType[()] | None = None,
        on_mouse_enter: EventType[()] | None = None,
        on_mouse_leave: EventType[()] | None = None,
        on_mouse_move: EventType[()] | None = None,
        on_mouse_out: EventType[()] | None = None,
        on_mouse_over: EventType[()] | None = None,
        on_mouse_up: EventType[()] | None = None,
        on_scroll: EventType[()] | None = None,
        on_scroll_end: EventType[()] | None = None,
        on_unmount: EventType[()] | None = None,
        **props,
    ) -> ChakraComponent:
        """Create a new Chakra component.

        Args:
            *children: The children of the component.
            style: The style of the component.
            key: A unique key for the component.
            id: The id for the component.
            ref: The Var to pass as the ref to the component.
            class_name: The class name for the component.
            autofocus: Whether the component should take the focus once the page is loaded
            custom_attrs: custom attribute
            **props: The properties of the component.

        Returns:
            A new Chakra component.
        """

class ChakraProvider(ChakraComponent):
    @classmethod
    def create(
        cls,
        *children,
        theme: Var[str] | str | None = None,
        style: Sequence[Mapping[str, Any]]
        | Mapping[str, Any]
        | Var[Mapping[str, Any]]
        | Breakpoints
        | None = None,
        key: Any | None = None,
        id: Any | None = None,
        ref: Var | None = None,
        class_name: Any | None = None,
        autofocus: bool | None = None,
        custom_attrs: dict[str, Var | Any] | None = None,
        on_blur: EventType[()] | None = None,
        on_click: EventType[()] | EventType[PointerEventInfo] | None = None,
        on_context_menu: EventType[()] | EventType[PointerEventInfo] | None = None,
        on_double_click: EventType[()] | EventType[PointerEventInfo] | None = None,
        on_focus: EventType[()] | None = None,
        on_mount: EventType[()] | None = None,
        on_mouse_down: EventType[()] | None = None,
        on_mouse_enter: EventType[()] | None = None,
        on_mouse_leave: EventType[()] | None = None,
        on_mouse_move: EventType[()] | None = None,
        on_mouse_out: EventType[()] | None = None,
        on_mouse_over: EventType[()] | None = None,
        on_mouse_up: EventType[()] | None = None,
        on_scroll: EventType[()] | None = None,
        on_scroll_end: EventType[()] | None = None,
        on_unmount: EventType[()] | None = None,
        **props,
    ) -> ChakraProvider:
        """Create a new ChakraProvider component.

        Returns:
            A new ChakraProvider component.
        """

    def add_imports(self) -> ImportDict: ...

chakra_provider = ChakraProvider.create()

class ChakraColorModeProvider(Component):
    @classmethod
    def create(
        cls,
        *children,
        style: Sequence[Mapping[str, Any]]
        | Mapping[str, Any]
        | Var[Mapping[str, Any]]
        | Breakpoints
        | None = None,
        key: Any | None = None,
        id: Any | None = None,
        ref: Var | None = None,
        class_name: Any | None = None,
        autofocus: bool | None = None,
        custom_attrs: dict[str, Var | Any] | None = None,
        on_blur: EventType[()] | None = None,
        on_click: EventType[()] | EventType[PointerEventInfo] | None = None,
        on_context_menu: EventType[()] | EventType[PointerEventInfo] | None = None,
        on_double_click: EventType[()] | EventType[PointerEventInfo] | None = None,
        on_focus: EventType[()] | None = None,
        on_mount: EventType[()] | None = None,
        on_mouse_down: EventType[()] | None = None,
        on_mouse_enter: EventType[()] | None = None,
        on_mouse_leave: EventType[()] | None = None,
        on_mouse_move: EventType[()] | None = None,
        on_mouse_out: EventType[()] | None = None,
        on_mouse_over: EventType[()] | None = None,
        on_mouse_up: EventType[()] | None = None,
        on_scroll: EventType[()] | None = None,
        on_scroll_end: EventType[()] | None = None,
        on_unmount: EventType[()] | None = None,
        **props,
    ) -> ChakraColorModeProvider:
        """Create the component.

        Args:
            *children: The children of the component.
            style: The style of the component.
            key: A unique key for the component.
            id: The id for the component.
            ref: The Var to pass as the ref to the component.
            class_name: The class name for the component.
            autofocus: Whether the component should take the focus once the page is loaded
            custom_attrs: custom attribute
            **props: The props of the component.

        Returns:
            The component.
        """

chakra_color_mode_provider = ChakraColorModeProvider.create()
LiteralColorScheme: TypeAlias = Literal[
    "none",
    "gray",
    "red",
    "orange",
    "yellow",
    "green",
    "teal",
    "blue",
    "cyan",
    "purple",
    "pink",
    "whiteAlpha",
    "blackAlpha",
    "linkedin",
    "facebook",
    "messenger",
    "whatsapp",
    "twitter",
    "telegram",
]
LiteralVariant: TypeAlias = Literal["solid", "subtle", "outline"]
LiteralDividerVariant: TypeAlias = Literal["solid", "dashed"]
LiteralTheme: TypeAlias = Literal["light", "dark"]
LiteralTagColorScheme: TypeAlias = Literal[
    "gray", "red", "orange", "yellow", "green", "teal", "blue", "cyan", "purple", "pink"
]
LiteralTagAlign: TypeAlias = Literal["center", "end", "start"]
LiteralTabsVariant: TypeAlias = Literal[
    "line", "enclosed", "enclosed-colored", "soft-rounded", "solid-rounded", "unstyled"
]
LiteralStatus: TypeAlias = Literal["success", "info", "warning", "error"]
LiteralAlertVariant: TypeAlias = Literal["subtle", "left-accent", "top-accent", "solid"]
LiteralButtonVariant: TypeAlias = Literal[
    "ghost", "outline", "solid", "link", "unstyled"
]
LiteralSpinnerPlacement: TypeAlias = Literal["start", "end"]
LiteralLanguage: TypeAlias = Literal[
    "en",
    "da",
    "de",
    "es",
    "fr",
    "ja",
    "ko",
    "pt_br",
    "ru",
    "zh_cn",
    "ro",
    "pl",
    "ckb",
    "lv",
    "se",
    "ua",
    "he",
    "it",
]
LiteralInputVariant: TypeAlias = Literal["outline", "filled", "flushed", "unstyled"]
LiteralInputNumberMode: TypeAlias = Literal[
    "text", "search", "none", "tel", "url", "email", "numeric", "decimal"
]
LiteralChakraDirection: TypeAlias = Literal["ltr", "rtl"]
LiteralCardVariant: TypeAlias = Literal["outline", "filled", "elevated", "unstyled"]
LiteralStackDirection: TypeAlias = Literal["row", "column"]
LiteralImageLoading: TypeAlias = Literal["eager", "lazy"]
LiteralTagSize: TypeAlias = Literal["sm", "md", "lg"]
LiteralSpinnerSize: TypeAlias = Literal[LiteralTagSize, "xs", "xl"]
LiteralAvatarSize: TypeAlias = Literal[LiteralTagSize, "xl", "xs", "2xl", "full", "2xs"]
LiteralButtonSize: TypeAlias = Literal["sm", "md", "lg", "xs"]
LiteralAlertDialogSize: TypeAlias = Literal[
    "sm", "md", "lg", "xs", "2xl", "full", "3xl", "4xl", "5xl", "6xl"
]
LiteralDrawerSize: TypeAlias = Literal[LiteralSpinnerSize, "xl", "full"]
LiteralMenuStrategy: TypeAlias = Literal["fixed", "absolute"]
LiteralMenuOption: TypeAlias = Literal["checkbox", "radio"]
LiteralPopOverTrigger: TypeAlias = Literal["click", "hover"]
LiteralHeadingSize: TypeAlias = Literal[
    "lg", "md", "sm", "xs", "xl", "2xl", "3xl", "4xl"
]
