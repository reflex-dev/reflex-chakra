"""Stub file for reflex_chakra/components/forms/email.py"""

# ------------------- DO NOT EDIT ----------------------
# This file was generated by `reflex/utils/pyi_generator.py`!
# ------------------------------------------------------
from typing import (
    Any,
    Literal,
    overload,
)
from collections.abc import Mapping, Sequence
from reflex.components.core.breakpoints import Breakpoints
from reflex.event import (
    EventType,
    PointerEventInfo,
)
from reflex.vars.base import Var
from reflex_chakra.components.forms.input import Input

class Email(Input):
    @overload
    @classmethod
    def create(  # type: ignore
        cls,
        *children,
        type_: Var[str] | str | None = None,
        value: Var[str] | str | None = None,
        default_value: Var[str] | str | None = None,
        placeholder: Var[str] | str | None = None,
        error_border_color: Var[str] | str | None = None,
        focus_border_color: Var[str] | str | None = None,
        is_disabled: Var[bool] | bool | None = None,
        is_invalid: Var[bool] | bool | None = None,
        is_read_only: Var[bool] | bool | None = None,
        is_required: Var[bool] | bool | None = None,
        variant: Literal["filled", "flushed", "outline", "unstyled"]
        | Var[Literal["filled", "flushed", "outline", "unstyled"]]
        | None = None,
        size: Literal["lg", "md", "sm", "xs"]
        | Var[Literal["lg", "md", "sm", "xs"]]
        | None = None,
        name: Var[str] | str | None = None,
        style: Sequence[Mapping[str, Any]]
        | Mapping[str, Any]
        | Var[Mapping[str, Any]]
        | Breakpoints
        | None = None,
        key: Any | None = None,
        id: Any | None = None,
        ref: Var | None = None,
        class_name: Any | None = None,
        autofocus: bool | None = None,
        custom_attrs: dict[str, Var | Any] | None = None,
        on_blur: EventType[Any] | None = None,
        on_change: EventType[Any] | None = None,
        on_click: EventType[()] | EventType[PointerEventInfo] | None = None,
        on_context_menu: EventType[()] | EventType[PointerEventInfo] | None = None,
        on_double_click: EventType[()] | EventType[PointerEventInfo] | None = None,
        on_focus: EventType[Any] | None = None,
        on_key_down: EventType[Any] | None = None,
        on_key_up: EventType[Any] | None = None,
        on_mount: EventType[()] | None = None,
        on_mouse_down: EventType[()] | None = None,
        on_mouse_enter: EventType[()] | None = None,
        on_mouse_leave: EventType[()] | None = None,
        on_mouse_move: EventType[()] | None = None,
        on_mouse_out: EventType[()] | None = None,
        on_mouse_over: EventType[()] | None = None,
        on_mouse_up: EventType[()] | None = None,
        on_scroll: EventType[()] | None = None,
        on_scroll_end: EventType[()] | None = None,
        on_unmount: EventType[()] | None = None,
        **props,
    ) -> Email:
        """Create an Input component.

        Args:
            *children: The children of the component.
            type_: The type of input.
            value: State var to bind the input.
            default_value: The default value of the input.
            placeholder: The placeholder text.
            error_border_color: The border color when the input is invalid.
            focus_border_color: The border color when the input is focused.
            is_disabled: If true, the form control will be disabled. This has 2 side effects - The FormLabel will have `data-disabled` attribute - The form element (e.g, Input) will be disabled
            is_invalid: If true, the form control will be invalid. This has 2 side effects - The FormLabel and FormErrorIcon will have `data-invalid` set to true - The form element (e.g, Input) will have `aria-invalid` set to true
            is_read_only: If true, the form control will be readonly.
            is_required: If true, the form control will be required. This has 2 side effects - The FormLabel will show a required indicator - The form element (e.g, Input) will have `aria-required` set to true
            variant: "outline" | "filled" | "flushed" | "unstyled"
            size: "lg" | "md" | "sm" | "xs"
            name: The name of the form field
            on_change: Fired when the input value changes.
            on_focus: Fired when the input is focused.
            on_blur: Fired when the input lose focus.
            on_key_down: Fired when a key is pressed down.
            on_key_up: Fired when a key is released.
            style: The style of the component.
            key: A unique key for the component.
            id: The id for the component.
            ref: The Var to pass as the ref to the component.
            class_name: The class name for the component.
            autofocus: Whether the component should take the focus once the page is loaded
            custom_attrs: custom attribute
            **props: The properties of the component.

        Returns:
            The component."""
        ...
