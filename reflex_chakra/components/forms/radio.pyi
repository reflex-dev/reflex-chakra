"""Stub file for reflex_chakra/components/forms/radio.py"""

# ------------------- DO NOT EDIT ----------------------
# This file was generated by `reflex/utils/pyi_generator.py`!
# ------------------------------------------------------
from typing import (
    Any,
    overload,
)
from collections.abc import Mapping, Sequence
from reflex.components.core.breakpoints import Breakpoints
from reflex.event import (
    EventType,
    PointerEventInfo,
)
from reflex.vars.base import Var
from reflex_chakra.components import ChakraComponent
from reflex_chakra.components.typography.text import Text

class RadioGroup(ChakraComponent):
    @overload
    @classmethod
    def create(  # type: ignore
        cls,
        *children,
        value: Any | Var[Any] | None = None,
        default_value: Any | Var[Any] | None = None,
        name: Var[str] | str | None = None,
        style: Sequence[Mapping[str, Any]]
        | Mapping[str, Any]
        | Var[Mapping[str, Any]]
        | Breakpoints
        | None = None,
        key: Any | None = None,
        id: Any | None = None,
        ref: Var | None = None,
        class_name: Any | None = None,
        autofocus: bool | None = None,
        custom_attrs: dict[str, Var | Any] | None = None,
        on_blur: EventType[()] | None = None,
        on_change: EventType[Any] | None = None,
        on_click: EventType[()] | EventType[PointerEventInfo] | None = None,
        on_context_menu: EventType[()] | EventType[PointerEventInfo] | None = None,
        on_double_click: EventType[()] | EventType[PointerEventInfo] | None = None,
        on_focus: EventType[()] | None = None,
        on_mount: EventType[()] | None = None,
        on_mouse_down: EventType[()] | None = None,
        on_mouse_enter: EventType[()] | None = None,
        on_mouse_leave: EventType[()] | None = None,
        on_mouse_move: EventType[()] | None = None,
        on_mouse_out: EventType[()] | None = None,
        on_mouse_over: EventType[()] | None = None,
        on_mouse_up: EventType[()] | None = None,
        on_scroll: EventType[()] | None = None,
        on_scroll_end: EventType[()] | None = None,
        on_unmount: EventType[()] | None = None,
        **props,
    ) -> RadioGroup:
        """Create a radio group component.

        Args:
            *children: The children of the component.
            value: State var to bind the input.
            default_value: The default value.
            name: The name of the form field
            on_change: Fired when the radio group value changes.
            style: The style of the component.
            key: A unique key for the component.
            id: The id for the component.
            ref: The Var to pass as the ref to the component.
            class_name: The class name for the component.
            autofocus: Whether the component should take the focus once the page is loaded
            custom_attrs: custom attribute
            **props: The props of the component.

        Returns:
            The component."""
        ...

class Radio(Text):
    @overload
    @classmethod
    def create(  # type: ignore
        cls,
        *children,
        value: Any | Var[Any] | None = None,
        default_value: Any | Var[Any] | None = None,
        color_scheme: Var[str] | str | None = None,
        default_checked: Var[bool] | bool | None = None,
        is_checked: Var[bool] | bool | None = None,
        is_disabled: Var[bool] | bool | None = None,
        is_invalid: Var[bool] | bool | None = None,
        is_read_only: Var[bool] | bool | None = None,
        is_required: Var[bool] | bool | None = None,
        as_: Var[str] | str | None = None,
        no_of_lines: Var[int] | int | None = None,
        style: Sequence[Mapping[str, Any]]
        | Mapping[str, Any]
        | Var[Mapping[str, Any]]
        | Breakpoints
        | None = None,
        key: Any | None = None,
        id: Any | None = None,
        ref: Var | None = None,
        class_name: Any | None = None,
        autofocus: bool | None = None,
        custom_attrs: dict[str, Var | Any] | None = None,
        on_blur: EventType[()] | None = None,
        on_click: EventType[()] | EventType[PointerEventInfo] | None = None,
        on_context_menu: EventType[()] | EventType[PointerEventInfo] | None = None,
        on_double_click: EventType[()] | EventType[PointerEventInfo] | None = None,
        on_focus: EventType[()] | None = None,
        on_mount: EventType[()] | None = None,
        on_mouse_down: EventType[()] | None = None,
        on_mouse_enter: EventType[()] | None = None,
        on_mouse_leave: EventType[()] | None = None,
        on_mouse_move: EventType[()] | None = None,
        on_mouse_out: EventType[()] | None = None,
        on_mouse_over: EventType[()] | None = None,
        on_mouse_up: EventType[()] | None = None,
        on_scroll: EventType[()] | None = None,
        on_scroll_end: EventType[()] | None = None,
        on_unmount: EventType[()] | None = None,
        **props,
    ) -> Radio:
        """Create a radio component.

        By default, the value is bound to the first child.

        Args:
            *children: The children of the component.
            value: Value of radio.
            default_value: The default value.
            color_scheme: The color scheme.
            default_checked: If true, the radio will be initially checked.
            is_checked: If true, the radio will be checked. You'll need to pass onChange to update its value (since it is now controlled)
            is_disabled: If true, the radio will be disabled.
            is_invalid: If true, the radio button will be invalid. This also sets `aria-invalid` to true.
            is_read_only: If true, the radio will be read-only
            is_required: If true, the radio button will be required. This also sets `aria-required` to true.
            as_: Override the tag. The default tag is `<p>`.
            no_of_lines: Truncate text after a specific number of lines. It will render an ellipsis when the text exceeds the width of the viewport or max_width prop.
            style: The style of the component.
            key: A unique key for the component.
            id: The id for the component.
            ref: The Var to pass as the ref to the component.
            class_name: The class name for the component.
            autofocus: Whether the component should take the focus once the page is loaded
            custom_attrs: custom attribute
            **props: The props of the component.

        Returns:
            The radio component."""
        ...
