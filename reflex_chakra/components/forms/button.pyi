"""Stub file for reflex_chakra/components/forms/button.py"""

# ------------------- DO NOT EDIT ----------------------
# This file was generated by `reflex/utils/pyi_generator.py`!
# ------------------------------------------------------
from collections.abc import Mapping, Sequence
from typing import (
    Any,
    Literal,
)

from reflex.components.core.breakpoints import Breakpoints
from reflex.event import (
    EventType,
    PointerEventInfo,
)
from reflex.vars.base import Var

from reflex_chakra.components import (
    ChakraComponent,
)

class Button(ChakraComponent):
    @classmethod
    def create(
        cls,
        *children,
        icon_spacing: Var[int] | int | None = None,
        is_active: Var[bool] | bool | None = None,
        is_disabled: Var[bool] | bool | None = None,
        is_full_width: Var[bool] | bool | None = None,
        is_loading: Var[bool] | bool | None = None,
        loading_text: Var[str] | str | None = None,
        size: Literal["lg", "md", "sm", "xs"]
        | Var[Literal["lg", "md", "sm", "xs"]]
        | None = None,
        variant: Literal["ghost", "link", "outline", "solid", "unstyled"]
        | Var[Literal["ghost", "link", "outline", "solid", "unstyled"]]
        | None = None,
        color_scheme: Literal[
            "blackAlpha",
            "blue",
            "cyan",
            "facebook",
            "gray",
            "green",
            "linkedin",
            "messenger",
            "none",
            "orange",
            "pink",
            "purple",
            "red",
            "teal",
            "telegram",
            "twitter",
            "whatsapp",
            "whiteAlpha",
            "yellow",
        ]
        | Var[
            Literal[
                "blackAlpha",
                "blue",
                "cyan",
                "facebook",
                "gray",
                "green",
                "linkedin",
                "messenger",
                "none",
                "orange",
                "pink",
                "purple",
                "red",
                "teal",
                "telegram",
                "twitter",
                "whatsapp",
                "whiteAlpha",
                "yellow",
            ]
        ]
        | None = None,
        spinner_placement: Literal["end", "start"]
        | Var[Literal["end", "start"]]
        | None = None,
        type_: Var[str] | str | None = None,
        name: Var[str] | str | None = None,
        style: Sequence[Mapping[str, Any]]
        | Mapping[str, Any]
        | Var[Mapping[str, Any]]
        | Breakpoints
        | None = None,
        key: Any | None = None,
        id: Any | None = None,
        ref: Var | None = None,
        class_name: Any | None = None,
        autofocus: bool | None = None,
        custom_attrs: dict[str, Var | Any] | None = None,
        on_blur: EventType[()] | None = None,
        on_click: EventType[()] | EventType[PointerEventInfo] | None = None,
        on_context_menu: EventType[()] | EventType[PointerEventInfo] | None = None,
        on_double_click: EventType[()] | EventType[PointerEventInfo] | None = None,
        on_focus: EventType[()] | None = None,
        on_mount: EventType[()] | None = None,
        on_mouse_down: EventType[()] | None = None,
        on_mouse_enter: EventType[()] | None = None,
        on_mouse_leave: EventType[()] | None = None,
        on_mouse_move: EventType[()] | None = None,
        on_mouse_out: EventType[()] | None = None,
        on_mouse_over: EventType[()] | None = None,
        on_mouse_up: EventType[()] | None = None,
        on_scroll: EventType[()] | None = None,
        on_scroll_end: EventType[()] | None = None,
        on_unmount: EventType[()] | None = None,
        **props,
    ) -> Button:
        """Create a new Chakra component.

        Args:
            *children: The children of the component.
            icon_spacing: The space between the button icon and label.
            is_active: If true, the button will be styled in its active state.
            is_disabled: If true, the button will be styled in its disabled state.
            is_full_width: If true, the button will take up the full width of its container.
            is_loading: If true, the button will show a spinner.
            loading_text: The label to show in the button when isLoading is true If no text is passed, it only shows the spinner.
            size: "lg" | "md" | "sm" | "xs"
            variant: "ghost" | "outline" | "solid" | "link" | "unstyled"
            color_scheme: Built in color scheme for ease of use.  Options:  "whiteAlpha" | "blackAlpha" | "gray" | "red" | "orange" | "yellow" | "green" | "teal" | "blue" | "cyan"  | "purple" | "pink" | "linkedin" | "facebook" | "messenger" | "whatsapp" | "twitter" | "telegram"
            spinner_placement: Position of the loading spinner.  Options:  "start" | "end"
            type_: The type of button.
            name: The name of the form field
            style: The style of the component.
            key: A unique key for the component.
            id: The id for the component.
            ref: The Var to pass as the ref to the component.
            class_name: The class name for the component.
            autofocus: Whether the component should take the focus once the page is loaded
            custom_attrs: custom attribute
            **props: The properties of the component.

        Returns:
            A new Chakra component.
        """

class ButtonGroup(ChakraComponent):
    @classmethod
    def create(
        cls,
        *children,
        is_attached: Var[bool] | bool | None = None,
        is_disabled: Var[bool] | bool | None = None,
        spacing: Var[int] | int | None = None,
        size: Literal["lg", "md", "sm", "xs"]
        | Var[Literal["lg", "md", "sm", "xs"]]
        | None = None,
        variant: Literal["ghost", "link", "outline", "solid", "unstyled"]
        | Var[Literal["ghost", "link", "outline", "solid", "unstyled"]]
        | None = None,
        style: Sequence[Mapping[str, Any]]
        | Mapping[str, Any]
        | Var[Mapping[str, Any]]
        | Breakpoints
        | None = None,
        key: Any | None = None,
        id: Any | None = None,
        ref: Var | None = None,
        class_name: Any | None = None,
        autofocus: bool | None = None,
        custom_attrs: dict[str, Var | Any] | None = None,
        on_blur: EventType[()] | None = None,
        on_click: EventType[()] | EventType[PointerEventInfo] | None = None,
        on_context_menu: EventType[()] | EventType[PointerEventInfo] | None = None,
        on_double_click: EventType[()] | EventType[PointerEventInfo] | None = None,
        on_focus: EventType[()] | None = None,
        on_mount: EventType[()] | None = None,
        on_mouse_down: EventType[()] | None = None,
        on_mouse_enter: EventType[()] | None = None,
        on_mouse_leave: EventType[()] | None = None,
        on_mouse_move: EventType[()] | None = None,
        on_mouse_out: EventType[()] | None = None,
        on_mouse_over: EventType[()] | None = None,
        on_mouse_up: EventType[()] | None = None,
        on_scroll: EventType[()] | None = None,
        on_scroll_end: EventType[()] | None = None,
        on_unmount: EventType[()] | None = None,
        **props,
    ) -> ButtonGroup:
        """Create a new Chakra component.

        Args:
            *children: The children of the component.
            is_attached: If true, the borderRadius of button that are direct children will be altered to look flushed together.
            is_disabled: If true, all wrapped button will be disabled.
            spacing: The spacing between the buttons.
            size: "lg" | "md" | "sm" | "xs"
            variant: "ghost" | "outline" | "solid" | "link" | "unstyled"
            style: The style of the component.
            key: A unique key for the component.
            id: The id for the component.
            ref: The Var to pass as the ref to the component.
            class_name: The class name for the component.
            autofocus: Whether the component should take the focus once the page is loaded
            custom_attrs: custom attribute
            **props: The properties of the component.

        Returns:
            A new Chakra component.
        """
